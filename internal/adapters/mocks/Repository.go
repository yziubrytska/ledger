// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "ledger/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddMoney provides a mock function with given fields: account
func (_m *Repository) AddMoney(account models.Accounts) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Accounts) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: userID
func (_m *Repository) GetAccount(userID uuid.UUID) (*models.Accounts, error) {
	ret := _m.Called(userID)

	var r0 *models.Accounts
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Accounts); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Accounts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
